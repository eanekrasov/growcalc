<?php

/**
 * @file
 * Module for the growcalc_fertilizer Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implement hook_init().
 */
function growcalc_fertilizer_init() {
  if ((arg(0) !== 'admin') && (arg(0) !== 'js') && (arg(0) !== 'system')) {
    drupal_add_library('system', 'ui.dialog');

    drupal_add_js(drupal_get_path('module', 'growcalc_fertilizer') . '/js/growcalc_fertilizer.js');
    drupal_add_css(drupal_get_path('module', 'growcalc_fertilizer') . '/css/growcalc_fertilizer.css');

    $query = new EntityFieldQuery();
    $growcalc_fertilizers = $query->entityCondition('entity_type', 'node')         
      ->propertyCondition('type', 'growcalc_fertilizer')
      ->execute();

    $data = array();
    if (!empty($growcalc_fertilizers['node'])) {
      $growcalc_fertilizers = node_load_multiple(array_keys($growcalc_fertilizers['node']));
      foreach($growcalc_fertilizers as $fertilizer) {
        $fertilizer_wrapper = entity_metadata_wrapper('node', $fertilizer);
        $data[$fertilizer->title] = array(
          'id' => $fertilizer->nid,
          'name' => $fertilizer->title,
          'description' => isset($fertilizer->description) ? $fertilizer->description[$fertilizer->language][0]['value'] : "",
          'status' => $fertilizer->status,
          
        );

        $elements = array();
        if ($fertilizer_wrapper->growcalc_elements->count() > 0) {
          foreach($fertilizer_wrapper->growcalc_elements as $element_wrapper) {
            $elements[] = array(
              'element' => $element_wrapper->growcalc_element->title->value(),
              'amount' => $element_wrapper->amount->value()
            );
          }
        }
        $data[$fertilizer->title]['elements'] = $elements;

      }
    }
    
    drupal_add_js(array('growcalc' => array('fertilizers' => $data)), 'setting');
  }
}
  
/**
 * Implements hook_menu()
 */
function growcalc_fertilizer_menu() {
  $items['growcalc/ajax/fertilizer/create'] = array(
    'page callback' => 'growcalc_fertilizer_ajax_create',
    'page arguments' => array(),
    'access arguments' => array('administer growcalc fertilizers'),
  );

  $items['growcalc/ajax/fertilizer/%node/update'] = array(
    'page callback' => 'growcalc_fertilizer_ajax_update',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc fertilizers'),
  );

  $items['growcalc/ajax/fertilizer/%node/delete'] = array(
    'page callback' => 'growcalc_fertilizer_ajax_delete',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc fertilizers'),
  );

  $items['admin/config/growcalc/fertilizer'] = array(
    'title' => 'GrowCalc Fertilizer',
    'description' => 'Configure GrowCalc fertilizer.',
    'access arguments' => array('administer growcalc fertilizer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growcalc_fertilizer_settings'),
    'file' => 'growcalc_fertilizer.admin.inc'
  );

  return $items;
}

function growcalc_fertilizer_new() {
  $fertilizer = new stdClass();
  $fertilizer->type = 'growcalc_fertilizer';
  $fertilizer->status = 1;
  $fertilizer->language = 'und'; //language_default()->language;
  $fertilizer->created = time();
  $fertilizer->timestamp = time();
  node_object_prepare($fertilizer);

  return $fertilizer;
}

function growcalc_fertilizer_update($fertilizer, $values) {
  $fertilizer->title = $values['name'];
  $fertilizer->description[$fertilizer->language][0]['value'] = $values['description'];
  //$fertilizer->status = ($values['status'] == True);

  // Добавление отсутствующих элементов, обновление существующих
  foreach($values['elements'] as $Element) {
    $contains = false;

    if (isset($fertilizer->growcalc_elements)) {
      foreach($fertilizer->growcalc_elements[$fertilizer->language] as $element) {
        $element = entity_metadata_wrapper('field_collection_item', $element['value']);

        if ($element->growcalc_element->title->value() == $Element['element']) {
          $contains = true;

          $element->amount->set($Element['amount']);
          $element->save();
          break;
        }
      }
    }

    if (!$contains) {
      $ref = node_load_multiple(FALSE, array('title' => $Element['element'], 'type' => 'growcalc_element'));
      $ref = reset($ref);
      $newElement = entity_create('field_collection_item', array(
          'field_name'           => 'growcalc_elements',
          'amount'            => array(LANGUAGE_NONE => array(0 => array('value' => $Element['amount']))),
          'growcalc_element' => array(LANGUAGE_NONE => array(0 => array('target_id' => $ref->nid, 'target_type' => 'node'))),
      ));
      $newElement->setHostEntity('node', $fertilizer);
      $newElement->save();
    }
  }

  // Удаление ионов
  if (isset($fertilizer->growcalc_elements)) {
    foreach($fertilizer->growcalc_elements[$fertilizer->language] as $element_id) {
      $contains = false;
      $element = entity_metadata_wrapper('field_collection_item', $element_id['value']);
      $elementSymbol = $element->growcalc_element->title->value();

      foreach($values['elements'] as $Element) {
        if ($elementSymbol == $Element['element']) {
          $contains = true;
        }
      }

      if (!$contains) {
        foreach($fertilizer->growcalc_elements['und'] as $k=>$v) {
          if ($v['value'] == $element->item_id->value()) {
            unset($fertilizer->growcalc_elements['und'][$k]);
            break;
          }
        }
        $element->delete();
      }
    }
  }

  node_submit($fertilizer);
  node_save($fertilizer);

  return $fertilizer;
}

function growcalc_fertilizer_ajax_update($fertilizer) {
  $fertilizer = growcalc_fertilizer_update(growcalc_fertilizer_new(), array(
    'name' => check_plain($_POST['name']),
    'description' => check_plain($_POST['description']),
    'tag' => check_plain($_POST['tag']),
//    'status' => check_plain($_POST['status']),
    'elements' => $_POST['elements'],
  ));

  if ($fertilizer->nid) {
    print drupal_json_output(array('success' => true, 'id' => $fertilizer->nid));
  } else {
    // throw new ajax error.
  }
}

function growcalc_fertilizer_ajax_delete($fertilizer) {
  node_delete($fertilizer->nid);

  print drupal_json_output(array('success' => true));
}

/**
 * Implements hook_permission().
 */
function growcalc_fertilizer_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer growcalc fertilizers' => array(
      'title' => t('Administer growcalc_fertilizers'),
      'description' => t('Edit and delete all growcalc_fertilizers'),
    ),  
  );
  
  return $permissions;  
}

/**
 * Implements hook_views_api().
 */
function growcalc_fertilizer_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'growcalc_fertilizer') . '/views',
  );
}


/* =========== Block ============ */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function growcalc_fertilizer_block_info() {
  $blocks['growcalc_fertilizers'] = array(
    'info' => t('Fertilizers'),
    'cache' => DRUPAL_CACHE_CUSTOM,

    'status' => TRUE,
    'region' => 'sidebar_first',  // Not usually provided.
//    'visibility' => BLOCK_VISIBILITY_LISTED,  // Not usually provided.
//    'pages' => 'node/*', // Not usually provided here.
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 */
function growcalc_fertilizer_block_configure($delta = '') {
  $form = array();
  if ($delta == 'growcalc_fertilizers') {
    // TODO: form
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 */
function growcalc_fertilizer_block_save($delta = '', $edit = array()) {
  if ($delta == 'growcalc_fertilizers') {
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function growcalc_fertilizer_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'growcalc_fertilizers':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Fertilizers');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = growcalc_fertilizer_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function growcalc_fertilizer_block_contents($which_block) {
  switch ($which_block) {
    case 'growcalc_fertilizers':
      $filter = '<input class="calc-fertilizers-filter filter" id="calc-fertilizers-filter" type="text" placeholder="Filter...">';

      if (node_access('create', 'growcalc_fertilizer')) {
        $filter = '<div class="input-append">' . 
          $filter . 
          '<span class="add-on add-on-btn add-new"><a class="btn btn-success btn-add-new" href="'. $GLOBALS['base_path'] .'node/add/growcalc_fertilizer">+</a></span>
        </div>';
      }

      return array('#markup' => '
        <div class="list-with-filter">
          <div class="calc-fertilizers-control-group">
            <div class="controls">'.$filter.'</div>
          </div>
          <div id="calc-fertilizers"></div>
        </div>');
  }
}


