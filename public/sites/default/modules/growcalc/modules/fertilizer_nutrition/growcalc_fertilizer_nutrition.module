<?php

/**
 * @file
 * Module for the fertilizer nutrition Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implement hook_init().
 */
function growcalc_fertilizer_nutrition_init() {
  $attach = ((arg(0) !== 'system') && (arg(0) !== 'js') && (arg(0) !== 'admin') && (arg(0) !== 'field_collection'));
  $attach = $attach && !((arg(0) == 'node') && ((arg(1) == 'add') || ((is_numeric(arg(1))) && (arg(2) == 'edit'))));
  if ($attach) {

    drupal_add_library('system', 'ui.dialog');

    drupal_add_js(drupal_get_path('module', 'growcalc_fertilizer_nutrition') . '/js/growcalc_fertilizer_nutrition.js');
    drupal_add_css(drupal_get_path('module', 'growcalc_fertilizer_nutrition') . '/css/growcalc_fertilizer_nutrition.css');

    // fertilizer nutritions list
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')         
      ->propertyCondition('type', 'growcalc_fertilizer_nutrition')
      ->execute();

    $data = array();
    if (!empty($entities['node'])) {
      $entities = node_load_multiple(array_keys($entities['node']));
      foreach($entities as $entity) {
        $entity_wrapper = entity_metadata_wrapper('node', $entity);
        $data[$entity->title] = array(
          'id' => $entity->nid,
          'name' => $entity->title,
          //'status' => $entity->status,
          'fertilizers' => array(),
          'elements' => array(),
        );

        if ($entity_wrapper->growcalc_fertilizers->count() > 0) {
          foreach($entity_wrapper->growcalc_fertilizers as $fertilizer_wrapper) {
            $data[$entity->title]['fertilizers'][] = array(
              'fertilizer' => $fertilizer_wrapper->growcalc_fertilizer->title->value(),
              'amount' => $fertilizer_wrapper->amount->value()
            );
          }
        }
        if ($entity_wrapper->growcalc_elements->count() > 0) {
          foreach($entity_wrapper->growcalc_elements as $element_wrapper) {
            if (($element_wrapper->amount->value() > 0) && ($element_wrapper->growcalc_element->value() != NULL)) {
              $data[$entity->title]['elements'][] = array(
                'element' => $element_wrapper->growcalc_element->title->value(),
                'amount' => $element_wrapper->amount->value()
              );
            }
          }
        }
      }
    }
    drupal_add_js(array('growcalc' => array('fertilizer_nutritions' => $data)), 'setting');
  }
}
  
/**
 * Implements hook_menu()
 */
function growcalc_fertilizer_nutrition_menu() {
  $items['growcalc/ajax/fertilizer_nutrition/create'] = array(
    'page callback' => 'growcalc_fertilizer_nutrition_ajax_create',
    'page arguments' => array(),
    'access arguments' => array('administer growcalc fertilizer nutritions'),
  );

  $items['growcalc/ajax/fertilizer_nutrition/%node/update'] = array(
    'page callback' => 'growcalc_fertilizer_nutrition_ajax_update',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc fertilizer nutritions'),
  );

  $items['growcalc/ajax/fertilizer_nutrition/%node/delete'] = array(
    'page callback' => 'growcalc_fertilizer_nutrition_ajax_delete',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc fertilizer nutritions'),
  );

  $items['admin/config/growcalc/fertilizer_nutrition'] = array(
    'title' => 'Fertilizer nutrition',
    'description' => 'Configure fertilizer nutrition.',
    'access arguments' => array('administer growcalc fertilizer nutrition module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growcalc_fertilizer_nutrition_settings'),
    'file' => 'growcalc_fertilizer_nutrition.admin.inc'
  );

  return $items;
}

function _growcalc_fertilizer_nutrition_process_field(&$entity, $type, $field, $values, $valueKey, $valueValue) {
    // Добавление отсутствующих элементов, обновление существующих
  foreach($values as $item) {
    $contains = false;

    if (field_get_items('node', $entity, $field) != false) {
      foreach(field_get_items('node', $entity, $field) as $entity_item) {
        $item_wrapper = entity_metadata_wrapper('field_collection_item', $entity_item['value']);
        if ($item_wrapper->{$type}->title->value() == $item[$valueKey]) {
          $contains = true;
          $item_wrapper->{$valueValue}->set($item[$valueValue]);
          $item_wrapper->save();
          break;
        }
      }
    }

    if (!$contains) {
      $ref = node_load_multiple(array(), array('title' => $item[$valueKey], 'type' => $type));
      $ref = reset($ref);
      $newItem = entity_create('field_collection_item', array(
          'field_name'           => $field,
          $valueValue            => array(LANGUAGE_NONE => array(0 => array('value' => $item[$valueValue]))),
          $type                  => array(LANGUAGE_NONE => array(0 => array('target_id' => $ref->nid, 'target_type' => 'node'))),
      ));
      $newItem->setHostEntity('node', $entity);
      $newItem->save();
    }
  }

  // Удаление элементов
  if (field_get_items('node', $entity, $field) != false) {
    foreach(field_get_items('node', $entity, $field) as $entity_item) {
      $contains = false;
      $item_wrapper = entity_metadata_wrapper('field_collection_item', $entity_item['value']);
      foreach($values as $item) {
        if ($item_wrapper->{$type}->title->value() == $item[$valueKey]) {
          $contains = true;
        }
      }
      if (!$contains) {
        foreach(field_get_items('node', $entity, $field) as $k=>$v) {
          if ($v['value'] == $item_wrapper->item_id->value()) {
            unset($entity->{$field}['und'][$k]);
            break;
          }
        }
      }
    }
  }
}

function growcalc_fertilizer_nutrition_update($entity, $values) {
  $entity->title = $values['name'];

  _growcalc_fertilizer_nutrition_process_field($entity, 'growcalc_fertilizer', 'growcalc_fertilizers', $values['fertilizers'], 'fertilizer', 'amount');
  
  _growcalc_fertilizer_nutrition_process_field($entity, 'growcalc_element', 'growcalc_elements', $values['elements'], 'element', 'amount');
  
  node_submit($entity);
  node_save($entity);
  
  return $entity;  
}

function growcalc_fertilizer_nutrition_ajax_create($type) {
  $entity = growcalc_fertilizer_nutrition_update(growcalc_entity_new('growcalc_fertilizer_nutrition'), array(
    'name' => check_plain($_POST['name']),
    //'status' => check_plain($_POST['status']),
    'fertilizers' => $_POST['fertilizers'],
    'elements' => $_POST['elements'],
  ));

  if ($entity->nid) {
    print drupal_json_output(array('success' => true, 'id' => $entity->nid));
  } else {
    // throw new ajax error.
  }
}

function growcalc_fertilizer_nutrition_ajax_update($entity) {
  $entity = growcalc_fertilizer_nutrition_update($entity, array(
    'name' => check_plain($_POST['name']),
    //'status' => check_plain($_POST['status']),
    'fertilizers' => $_POST['fertilizers'],
    'elements' => $_POST['elements'],
  ));

  print drupal_json_output(array('success' => true));
}

function growcalc_fertilizer_nutrition_ajax_delete($entity) {
  node_delete($entity->nid);
  print drupal_json_output(array('success' => true));
}

/**
 * Implements hook_permission().
 */
function growcalc_fertilizer_nutrition_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer growcalc fertilizer nutritions' => array(
      'title' => t('Administer fertilizer nutritions'),
      'description' => t('Edit and delete all fertilizer nutritions'),
    ),  
    'administer growcalc fertilizer nutrition module' => array(
      'title' => t('Administer fertilizer nutrition module'),
      'description' => t('Change module settings'),
    ),  
  );
  
  return $permissions;  
}

/**
 * Implements hook_views_api().
 */
function growcalc_fertilizer_nutrition_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'growcalc_fertilizer_nutrition') . '/views',
  );
}


function growcalc_fertilizer_nutrition_preprocess_node(&$vars) {
  if ($vars['type'] == ' growcalc_fertilizer_nutrition') {
    $vars['theme_hook_suggestions'][] = 'node__growcalc_fertilizer_nutrition';
  }
}

function growcalc_fertilizer_nutrition_theme($existing, $type, $theme, $path) {
  $items = array(
    'node__growcalc_fertilizer_nutrition' => array(
      // Don't specify the path in the template name.
      // Unless you have your template inside a directory within this module.
      'template' =>  'node--growcalc-fertilizer-nutrition',
      'variables' => array('node' => (object)array()),
      // If you want to put the tpl in another location, you can use this key.
      'theme path' => drupal_get_path('module', 'growcalc_fertilizer_nutrition'),
    ),
  );

  return $items;
}