<?php

/**
 * @file
 * ...
 */

/**
 * Implement hook_init().
 */
function growcalc_element_program_init() {
  $attach = ((arg(0) !== 'system') && (arg(0) !== 'js') && (arg(0) !== 'admin') && (arg(0) !== 'field_collection'));
  $attach = $attach && !((arg(0) == 'node') && ((arg(1) == 'add') || ((is_numeric(arg(1))) && (arg(2) == 'edit'))));
  if ($attach) {

    drupal_add_library('system', 'ui.dialog');

    drupal_add_js(drupal_get_path('module', 'growcalc_element_program') . '/js/growcalc_element_program.js');
    drupal_add_css(drupal_get_path('module', 'growcalc_element_program') . '/css/growcalc_element_program.css');
    
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')         
      ->propertyCondition('type', 'growcalc_element_program')
      ->execute();

    $data = array();
    if (!empty($entities['node'])) {
      $entities = node_load_multiple(array_keys($entities['node']));
      foreach ($entities as $entity) {
        $entity_wrapper = entity_metadata_wrapper('node', $entity);
        $data[$entity->title] = array(
          'id' => $entity->nid,
          'title' => $entity->title,
          'status' => $entity->status,
          'element_nutritions' => array(),
        );
        
        if ($entity_wrapper->growcalc_element_nutritions->count() > 0) {
          foreach($entity_wrapper->growcalc_element_nutritions as $element_nutrition_wrapper) {
            $data[$entity->title]['element_nutritions'][] = array(
              'id' => $element_nutrition_wrapper->nid->value(),
            );
          }
        }
      }
    }
    drupal_add_js(array('growcalc' => array('element_programs' => $data)), 'setting');
  }
}

/**
 * Implements hook_menu()
 */
function growcalc_element_program_menu() {
  $items['growcalc/ajax/element_program/create'] = array(
    'page callback' => 'growcalc_element_program_ajax_create',
    'page arguments' => array(),
    'access arguments' => array('administer growcalc element programs'),
  );

  $items['growcalc/ajax/element_program/%node/update'] = array(
    'page callback' => 'growcalc_element_program_ajax_update',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc element programs'),
  );

  $items['growcalc/ajax/element_program/%node/delete'] = array(
    'page callback' => 'growcalc_element_program_ajax_delete',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc element programs'),
  );

  $items['admin/config/growcalc/element_program'] = array(
    'title' => 'Element program',
    'description' => 'Configure element program.',
    'access arguments' => array('administer growcalc element program module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growcalc_element_program_settings'),
    'file' => 'growcalc_element_program.admin.inc'
  );

  return $items;
}

function growcalc_element_program_update($entity, $values) {
  $entity->title = $values['title'];

  // Добавление отсутствующих элементов, обновление существующих
  foreach($values['element_nutritions'] as $ElementNutrition) {
    $contains = false;
    //if (isset($entity->growcalc_element_nutritions)) {
    //  foreach(field_get_items('node', $entity, 'growcalc_element_nutritions') as $element_id) {
    //    $element_nutrition_wrapper = entity_metadata_wrapper('node', $element_id['target_id']);
    //    if ($element_nutrition_wrapper->title->value() == $ElementNutrition['element_nutrition']) {
    //      $contains = true;
    //      //$element_nutrition_wrapper->save();
    //      break;
    //    }
    //  }
    //}
    if (!$contains) {
      //$ref = node_load_multiple(array(), array('title' => $ElementNutrition['element_nutrition'], 'type' => 'growcalc_element_nutrition'));
      //$ref = reset($ref);
      //$newElementNutrition = entity_create('node', array(
      //    'type'
      //    'field_name'           => 'growcalc_elements',
      //    'amount'            => array(LANGUAGE_NONE => array(0 => array('value' => $Element['amount']))),
      //    'growcalc_element' => array(LANGUAGE_NONE => array(0 => array('target_id' => $ref->nid, 'target_type' => 'node'))),
      //));
      //$newElement->setHostEntity('node', $entity);
      //$newElement->save();
    }
  }

  // Удаление элементов
  if (isset($entity->growcalc_element_nutritions)) {
    foreach(field_get_items('node', $entity, 'growcalc_element_nutritions') as $element_nutrition_id) {
      $contains = false;
      //$element_nutrition = entity_metadata_wrapper('node', $element_nutrition_id['target_id']);
      //if ($values['element_nutritions'] != null) {
      //  foreach($values['element_nutritions'] as $ElementNutrition) {
      //    if ($element_nutrition->title->value() == $ElementNutrition['element_nutrition']) {
      //      $contains = true;
      //    }
      //  }
      //}
      if (!$contains) {
        //foreach(field_get_items('node', $entity, 'growcalc_element_nutritions') as $k=>$element_nutrition_id) {
        //  if ($element_nutrition_id['target_id'] == $element_nutrition->nid->value()) {
        //    unset($entity->growcalc_element_nutritions['und'][$k]);
        //    break;
        //  }
        //}
      }
    }
  }

  node_submit($entity);
  node_save($entity);
  
  return $entity;  
}

function growcalc_element_program_ajax_create($type) {
  $entity = growcalc_element_program_update(growcalc_entity_new('growcalc_element_program'), array(
    'title' => check_plain($_POST['title']),
    //'status' => check_plain($_POST['status']),
    'element_nutritions' => $_POST['element_nutritions'],
  ));

  if ($entity->nid) {
    print drupal_json_output(array('success' => true, 'id' => $entity->nid));
  } else {
    // throw new ajax error.
  }
}

function growcalc_element_program_ajax_update($entity) {
  $entity = growcalc_element_program_update($entity, array(
    'title' => check_plain($_POST['title']),
    //'status' => check_plain($_POST['status']),
    'element_nutritions' => $_POST['element_nutritions'],
  ));

  print drupal_json_output(array('success' => true));
}

function growcalc_element_program_ajax_delete($entity) {
  node_delete($entity->nid);

  print drupal_json_output(array('success' => true));
}

/**
 * Implements hook_permission().
 */
function growcalc_element_program_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer growcalc element programs' => array(
      'title' => t('Administer growcalc_element_programs'),
      'description' => t('Edit and delete all growcalc_element_programs'),
    ),  
    'administer growcalc element program module' => array(
      'title' => t('Administer growcalc_element_program module'),
      'description' => t('Change module settings.'),
    ),  
  );

  return $permissions;  
}

/**
 * Implements hook_views_api().
 */
function growcalc_element_program_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'growcalc_element_program') . '/views',
  );
}

/* =========== Block ============ */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function growcalc_element_program_block_info() {
  $blocks['growcalc_element_programs'] = array(
    'info' => t('Element programs'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'status' => TRUE,
    'region' => 'sidebar_first',
//    'visibility' => BLOCK_VISIBILITY_LISTED,  // Not usually provided.
    //'pages' => 'growcalc/fertilizer_program/*',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 */
function growcalc_element_program_block_configure($delta = '') {
  $form = array();
  if ($delta == 'growcalc_element_programs') {
    // TODO: form
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 */
function growcalc_element_program_block_save($delta = '', $edit = array()) {
  if ($delta == 'growcalc_element_programs') {
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function growcalc_element_program_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'growcalc_element_programs':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Element programs');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = growcalc_element_program_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function growcalc_element_program_block_contents($which_block) {
  switch ($which_block) {
    case 'growcalc_element_programs':
      $filter = '<input class="calc-element-programs-filter filter" id="calc-element-programs-filter" type="text" placeholder="' . t('Element programs...') . '">';
      
      return array('#markup' => 
        '<div class="calc-element-programs-controls">'.$filter.'</div>' .
          '<div id="calc-element-programs"></div>');
  }
}



function growcalc_element_program_preprocess_node(&$vars) {
  if ($vars['type'] == ' growcalc_element_program') {
    $vars['theme_hook_suggestions'][] = 'node__growcalc_element_program';
  }
}

function growcalc_element_program_theme($existing, $type, $theme, $path) {
  $items = array(
    'node__growcalc_element_program' => array(
      // Don't specify the path in the template name.
      // Unless you have your template inside a directory within this module.
      'template' =>  'node--growcalc-element-program',
      'variables' => array('node' => (object)array()),
      // If you want to put the tpl in another location, you can use this key.
      'theme path' => drupal_get_path('module', 'growcalc_element_program'),
    ),
  );

  return $items;
}