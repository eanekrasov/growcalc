<?php

/**
 * @file
 * Module for the growcalc_element Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implement hook_init().
 */
function growcalc_element_nutrition_init() {
  if (arg(0) !== 'admin') {

    drupal_add_js(drupal_get_path('module', 'growcalc_element_nutrition') . '/js/growcalc_element_nutrition.js');
    drupal_add_css(drupal_get_path('module', 'growcalc_element_nutrition') . '/css/growcalc_element_nutrition.css');

    // elements list
    $growcalc_element_nutritions = growcalc_element_nutrition_load_multiple(FALSE, array()); // 'status' => 1
    $data = array();

    foreach($growcalc_element_nutritions as $element_nutrition) {
      $element_nutrition_wrapper = entity_metadata_wrapper('growcalc_element_nutrition', $element_nutrition);
      $data[$element_nutrition->name] = array(
        'id' => $element_nutrition->growcalc_element_nutrition_id,
        'name' => $element_nutrition->name,
        'description' => $element_nutrition->description,
        'status' => $element_nutrition->status,
      );

      $elements = array();
      if ($element_nutrition_wrapper->growcalc_elements->count() > 0) {
        foreach($element_nutrition_wrapper->growcalc_elements as $element_wrapper) {
          $elements[] = array(
            'element' => $element_wrapper->growcalc_element->name->value(),
            'amount' => $element_wrapper->amount->value()
          );
        }
      }
      $data[$element_nutrition->name]['elements'] = $elements;

    }

    drupal_add_js(array('growcalc' => array('element_nutritions' => $data)), 'setting');

  }

}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function growcalc_element_nutrition_entity_info() {
  $return['growcalc_element_nutrition'] = array(
    'label' => t('Growcalc Element Nutrition'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'GrowcalcElementNutrition',
    'controller class' => 'GrowcalcElementNutritionController',
    'base table' => 'growcalc_element_nutrition',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'growcalc_element_nutrition_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the growcalc_element types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'growcalc_element_nutrition_create',
    'access callback' => 'growcalc_element_nutrition_access',
    'module' => 'growcalc_element_nutrition',
    // The information below is used by the GrowcalcElementUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/growcalc/element_nutritions',
      'file' => 'growcalc_element_nutrition.admin.inc',
      'controller class' => 'GrowcalcElementNutritionUIController',
      'menu wildcard' => '%growcalc_element_nutrition',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['growcalc_element_nutrition_type'] = array(
    'label' => t('Growcalc Element Nutrition Type'),
    'entity class' => 'GrowcalcElementNutritionType',
    'controller class' => 'GrowcalcElementNutritionTypeController',
    'base table' => 'growcalc_element_nutrition_type',
    'fieldable' => FALSE,
    'bundle of' => 'growcalc_element_nutrition',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'growcalc_element_nutrition_type_access',
    'module' => 'growcalc_element_nutrition',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/growcalc/element_nutrition_types',
      'file' => 'growcalc_element_nutrition_type.admin.inc',
      'controller class' => 'GrowcalcElementNutritionTypeUIController',
    ),
  );

  return $return;
}

/**
 * Basic information for the page.
 *
 * @todo: Give links to admin pages, etc.
 */
function growcalc_element_nutrition_info_page() {
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Nothing here'),
  );

  return $content;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the growcalc_element types via a hook to avoid a recursion
 * issue as loading the growcalc_element types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function growcalc_element_nutrition_entity_info_alter(&$entity_info) {
  foreach (growcalc_element_nutrition_get_types() as $type => $info) {
    $entity_info['growcalc_element_nutrition']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/growcalc/element_nutrition_types/manage/%growcalc_element_nutrition_type',
        'real path' => 'admin/structure/growcalc/element_nutrition_types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer growcalc element types'),
      ),
    );
  }
}
  
/**
 * Implements hook_menu()
 */
function growcalc_element_nutrition_menu() {
  $items['growcalc/element_nutrition'] = array(
    'title' => 'GrowCalc element nutritions',
    'page callback' => 'growcalc_element_nutrition_info_page',
    'access callback' => TRUE,
  );

  $items['growcalc/element_nutrition/%growcalc_element_nutrition/ajax/update'] = array(
    'page callback' => 'growcalc_element_nutrition_ajax_update',
    'page arguments' => array(2),
    'access arguments' => array('administer growcalc element nutritions'),
  );

  $items['admin/config/growcalc/element_nutrition'] = array(
    'title' => 'GrowCalc element nutrition',
    'description' => 'Configure GrowCalc element nutrition.',
    'access arguments' => array('administer growcalc element nutrition'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growcalc_element_nutrition_settings'),
    'file' => 'growcalc_element_nutrition.admin.inc'
  );

  return $items;
}

function growcalc_element_nutrition_ajax_update($element_nutrition) {
//  dsm($_POST);

  //$element_wrapper = entity_metadata_wrapper('growcalc_element', $element);

  $element_nutrition->description = check_plain($_POST['Description']);

  // Добавление отсутствующих ионов, обновление существующих
  foreach($_POST['Elements'] as $Element) {
    $contains = false;

    foreach($element_nutrition->growcalc_elements['und'] as $element) {
      $element_nutrition_wrapper = entity_metadata_wrapper('field_collection_item', $element['value']);

      if ($element_nutrition_wrapper->growcalc_element->name->value() == $Element['Element']) {
        $contains = true;

        $element_nutrition_wrapper->amount->set($Element['Amount']);
        $element_nutrition_wrapper->save();
        break;
      }
    }

    if (!$contains) {
      $ref = growcalc_element_load_multiple(FALSE, array('name' => $Element['Element']));
      $ref = reset($ref);
      $newElement = entity_create('field_collection_item', array(
          'field_name'           => 'growcalc_elements',
          'amount'            => array(LANGUAGE_NONE => array(0 => array('value' => $Element['Amount']))),
          'growcalc_element' => array(LANGUAGE_NONE => array(0 => array('target_id' => $ref->growcalc_element_id))),
      ));
      $newElement->setHostEntity('growcalc_element_nutrition', $element_nutrition);
      $newElement->save();
    }
  }

  // Удаление элементов
  foreach($element->growcalc_elements['und'] as $element_id) {
    $contains = false;
    $element = entity_metadata_wrapper('field_collection_item', $element_id['value']);
    $elementName = $element->growcalc_element->name->value();

    foreach($_POST['Elements'] as $Element) {
      if ($elementName == $Element['Element']) {
        $contains = true;
      }
    }

    if (!$contains) {
      foreach($element_nutrition->growcalc_elements['und'] as $k=>$v) {
        if ($v['value'] == $ion->item_id->value()) {
          unset($element_nutrition->growcalc_elements['und'][$k]);
          break;
        }
      }
      $element->delete();
    }
  }

  $element_nutrition->save();
  //$element_wrapper->save();
  //foreach($element_wrapper->growcalc_ions as $ion) {
  //  dsm($ion->growcalc_element->name->value());
  //  dsm($ion->amount->value());
  //}
  //dsm($element->growcalc_ions);
  

  print drupal_json_output(array('success' => true));
}

/**
 * Implements hook_permission().
 */
function growcalc_element_nutrition_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer growcalc element nutrition types' => array(
      'title' => t('Administer growcalc element nutrition types'),
      'description' => t('Create and delete fields for growcalc_element_nutrition types, and set their permissions.'),
    ),
    'administer growcalc element nutritions' => array(
      'title' => t('Administer growcalc_element_nutritions'),
      'description' => t('Edit and delete all growcalc_element_nutritions'),
    ),  
  );
  
  //Generate permissions per growcalc_element 
  foreach (growcalc_element_nutrition_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name growcalc element nutrition" => array(
        'title' => t('%type_name: Edit any growcalc_element_nutrition', array('%type_name' => $type->label)),
      ),
      "view any $type_name growcalc element nutrition" => array(
        'title' => t('%type_name: View any growcalc_element_nutrition', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a growcalc_element_nutrition.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $growcalc_element
 *   Optionally a growcalc_element or a growcalc_element type to check access for. If nothing is
 *   given, access for all growcalc_elements is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function growcalc_element_nutrition_access($op, $growcalc_element_nutrition = NULL, $account = NULL) {
  if (user_access('administer growcalc element nutritions', $account)) {
    return TRUE;
  }
  if (isset($growcalc_element_nutrition) && $type_name = $growcalc_element_nutrition->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name growcalc element nutrition", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function growcalc_element_nutrition_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer growcalc element nutrition types', $account);
}


/**
 * Gets an array of all growcalc_element_nutrition types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return GrowcalcElementNutritionType[]
 *   Depending whether $type isset, an array of growcalc_element_nutrition types or a single one.
 */
function growcalc_element_nutrition_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our growcalc_element entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('growcalc_element_nutrition_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a growcalc_element_nutrition type by string.
 *
 * @param $type
 *   The machine-readable name of a growcalc_element_nutrition type to load.
 * @return
 *   A growcalc_element type array or FALSE if $type does not exist.
 */
function growcalc_element_nutrition_type_load($type) {
  return growcalc_element_nutrition_get_types($type);
}


/**
 * Fetch a growcalc_element_nutrition object. Make sure that the wildcard you choose 
 * in the growcalc_element_nutrition entity definition fits the function name here.
 *
 * @param $growcalc_element_nutrition_id
 *   Integer specifying the growcalc_element_nutrition id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $growcalc_element_nutrition object or FALSE if it cannot be loaded.
 *
 * @see growcalc_element_nutrition_load_multiple()
 */
function growcalc_element_nutrition_load($element_nutrition_id, $reset = FALSE) {
  $growcalc_element_nutritions = growcalc_element_nutrition_load_multiple(array($element_nutrition_id), array(), $reset);
  return reset($growcalc_element_nutritions);
}


/**
 * Load multiple growcalc_element_nutritions based on certain conditions.
 *
 * @param $growcalc_element_nutrition_ids
 *   An array of growcalc_element_nutrition IDs.
 * @param $conditions
 *   An array of conditions to match against the {growcalc_element_nutrition} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of growcalc_element_nutrition objects, indexed by growcalc_element_nutrition_id.
 *
 * @see entity_load()
 * @see growcalc_element_nutrition_load()
 */
function growcalc_element_nutrition_load_multiple($growcalc_element_nutrition_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('growcalc_element_nutrition', $growcalc_element_nutrition_ids, $conditions, $reset);
}


/**
 * Deletes a growcalc_element.
 */
function growcalc_element_nutrition_delete(GrowcalcElementNutrition $growcalc_element_nutrition) {
  $growcalc_element_nutrition->delete();
}


/**
 * Delete multiple growcalc_element_nutritions.
 *
 * @param $growcalc_element_nutrition_ids
 *   An array of growcalc_element_nutrition IDs.
 */
function growcalc_element_nutrition_delete_multiple(array $growcalc_element_nutrition_ids) {
  entity_get_controller('growcalc_element_nutrition')->delete($growcalc_element_nutrition_ids);
}


/**
 * Create a growcalc_element object.
 */
function growcalc_element_nutrition_create($values = array()) {
  return entity_get_controller('growcalc_element_nutrition')->create($values);
}

/**
 * Create a growcalc_element_type object.
 */
function growcalc_element_nutrition_type_create($values = array()) {
  return entity_get_controller('growcalc_element_nutrition_type')->create($values);
}


/**
 * Saves a growcalc_element_nutrition to the database.
 *
 * @param $growcalc_element_nutrition
 *   The growcalc_element object.
 */
function growcalc_element_nutrition_save(GrowcalcElementNutrition $growcalc_element_nutrition) {
  return $growcalc_element_nutrition->save();
}


/**
 * Saves a growcalc_element_nutrition type to the db.
 */
function growcalc_element_nutrition_type_save(GrowcalcElementNutritionType $type) {
  $type->save();
}


/**
 * Deletes a growcalc_element_nutrition type from the db.
 */
function growcalc_element_nutrition_type_delete(GrowcalcElementNutritionType $type) {
  $type->delete();
}


/**
 * URI callback for growcalc_element_nutritions
 */
function growcalc_element_nutrition_uri(GrowcalcElementNutrition $growcalc_element_nutrition){
  return array(
    'path' => 'growcalc/element_nutrition/' . $growcalc_element_nutrition->growcalc_element_nutrition_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function growcalc_element_nutrition_page_title(GrowcalcElementNutrition $growcalc_element_nutrition){
  return $growcalc_element_nutrition->name;
}


/**
 * Sets up content to show an individual growcalc_element_nutrition
 * @todo - get rid of drupal_set_title();
 */
function growcalc_element_nutrition_page_view($growcalc_element_nutrition, $view_mode = 'full') {    
  $controller = entity_get_controller('growcalc_element_nutrition');  
  $content = $controller->view(array($growcalc_element_nutrition->growcalc_element_nutrition_id => $growcalc_element_nutrition));
  drupal_set_title($growcalc_element_nutrition->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function growcalc_element_nutrition_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'growcalc_element_nutrition') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function growcalc_element_nutrition_theme() {
  return array(
    'growcalc_element_nutrition_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'growcalc_element_nutrition.admin.inc',
    ),
    'growcalc_element_nutrition' => array(
      'render element' => 'element_nutritions',
      'template' => 'growcalc-element-nutrition',
    ),
  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function growcalc_element_nutrition_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/growcalc/element_nutritions/add' on 'admin/structure/growcalc/element_nutritions'.
  if ($root_path == 'admin/content/growcalc/element_nutritions') {
    $item = menu_get_item('admin/content/growcalc/element_nutritions/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for growcalc_element entities
 */
class GrowcalcElementNutrition extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'growcalc_element_nutrition');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'growcalc/element_nutrition/' . $this->growcalc_element_nutrition_id);
  }
  
  
}


/**
 * The class used for growcalc_element_nutrition type entities
 */
class GrowcalcElementNutritionType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'growcalc_element_nutrition_type');
  }
  
}


/**
 * The Controller for growcalc_element entities
 */
class GrowcalcElementNutritionController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a growcalc_element_nutrition - we first set up the values that are specific
   * to our growcalc_element_nutrition schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the growcalc_element_nutrition.
   *
   * @return
   *   A growcalc_element object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our GrowcalcElement
    $values += array( 
      'growcalc_element_nutrition_id' => '',
      'is_new' => TRUE,
      'type' => 'growcalc_element_nutrition',
      'name' => '',
      'status' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $growcalc_element_nutrition = parent::create($values);
    return $growcalc_element_nutrition;
  }
  
  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    /*$content['growcalc_element_nutrition_sample_data'] =  array(
      '#markup' => theme('growcalc_element_nutrition_sample_data', array('growcalc_element_nutrition_sample_data' => check_plain($entity->data['sample_data']), 'growcalc_element_nutrition' => $entity)),
    );*/

    return $content;
  }
  
}


/**
 * The Controller for GrowcalcElement entities
 */
class GrowcalcElementNutritionTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a growcalc_element_nutrition type - we first set up the values that are specific
   * to our growcalc_element_nutrition type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the growcalc_element_nutrition.
   *
   * @return
   *   A growcalc_element_nutrition type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our growcalc_element_nutrition
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $growcalc_element_nutrition_type = parent::create($values);
    return $growcalc_element_nutrition_type;
  }
}


/* =========== Block ============ */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function growcalc_element_nutrition_block_info() {
  $blocks['growcalc_element_nutritions'] = array(
    'info' => t('Element nutritions'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'status' => TRUE,
    'region' => 'sidebar_first',
//    'visibility' => BLOCK_VISIBILITY_LISTED,  // Not usually provided.
    'pages' => 'growcalc/fertilizer_nutrition/*',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 */
function growcalc_element_nutrition_block_configure($delta = '') {
  $form = array();
  if ($delta == 'growcalc_element_nutritions') {
    // TODO: form
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 */
function growcalc_element_nutrition_block_save($delta = '', $edit = array()) {
  if ($delta == 'growcalc_element_nutritions') {
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function growcalc_element_nutrition_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'growcalc_element_nutritions':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Element nutritions');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = growcalc_element_nutrition_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function growcalc_element_nutrition_block_contents($which_block) {
  switch ($which_block) {
    case 'growcalc_element_nutritions':
      $growcalc_element_nutritions = growcalc_element_nutrition_load_multiple(FALSE, array('status' => 1));
      $data = array();

      foreach($growcalc_element_nutritions as $element_nutrition) {
        $element_nutrition_wrapper = entity_metadata_wrapper('growcalc_element_nutrition', $element_nutrition);
        $data[$element_nutrition->growcalc_element_nutrition_id] = array(
          'id' => $element_nutrition->growcalc_element_nutrition_id,
          'name' => $element_nutrition->name,
          'description' => $element_nutrition->description,
          'elements' => array(),
          'status' => $element_nutrition->status,
        );

        foreach($element_nutrition_wrapper->growcalc_elements as $growcalc_elements_item) {
          $data[$element_nutrition->growcalc_element_nutrition_id]['elements'][] = array(
            'element' => $growcalc_elements_item->growcalc_element->name->value(),
            'amount' => $growcalc_elements_item->amount->value(),
          );
        }
      }

      drupal_add_js(array('growcalc' => array('element_nutritions' => $data)), 'setting');

      $filter = '<input class="calc-element-nutritions-filter filter" id="calc-element-nutritions-filter" type="text" placeholder="Filter...">';

      if (growcalc_fertilizer_access('create')) {
        $filter = '<div class="input-append">' . 
          $filter . 
          '<span class="add-on add-on-btn add-new"><a class="btn btn-success btn-add-new" href="'. $GLOBALS['base_path'] .'admin/content/growcalc/element_nutritions/add">+</a></span>
        </div>';


      }
      
      return array('#markup' => '
        <div class="list-with-filter">
          <div class="calc-element-nutritions/adds-control-group">
            <div class="controls">'.$filter.'</div>
          </div>
          <div id="calc-element-nutritions"><ul class="nav nav-list nav-element-nutritions"></ul></div>
        </div>');
  }
}
