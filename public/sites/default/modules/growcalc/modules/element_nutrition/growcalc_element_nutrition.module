<?php

/**
 * @file
 * ...
 */

/**
 * Implement hook_init().
 */
function growcalc_element_nutrition_init() {
  $attach = ((arg(0) !== 'system') && (arg(0) !== 'js') && (arg(0) !== 'admin') && (arg(0) !== 'field_collection'));
  $attach = $attach && !((arg(0) == 'node') && ((arg(1) == 'add') || ((is_numeric(arg(1))) && (arg(2) == 'edit'))));
  if ($attach) {

    drupal_add_library('system', 'ui.dialog');

    drupal_add_js(drupal_get_path('module', 'growcalc_element_nutrition') . '/js/growcalc_element_nutrition.js');
    drupal_add_css(drupal_get_path('module', 'growcalc_element_nutrition') . '/css/growcalc_element_nutrition.css');
    
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')         
      ->propertyCondition('type', 'growcalc_element_nutrition')
      ->execute();

    $data = array();
    if (!empty($entities['node'])) {
      $entities = node_load_multiple(array_keys($entities['node']));
      foreach ($entities as $entity) {
        $entity_wrapper = entity_metadata_wrapper('node', $entity);
        $data[$entity->title] = array(
          'id' => $entity->nid,
          'name' => $entity->title,
          'status' => $entity->status,
          'elements' => array(),
        );
        
        if ($entity_wrapper->growcalc_elements->count() > 0) {
          foreach($entity_wrapper->growcalc_elements as $element_wrapper) {
            $data[$entity->title]['elements'][] = array(
              'element' => $element_wrapper->growcalc_element->title->value(),
              'amount' => $element_wrapper->amount->value()
            );
          }
        }
      }
    }
    drupal_add_js(array('growcalc' => array('element_nutritions' => $data)), 'setting');
  }
}

/**
 * Implements hook_menu()
 */
function growcalc_element_nutrition_menu() {
  $items['growcalc/ajax/element_nutrition/create'] = array(
    'page callback' => 'growcalc_element_nutrition_ajax_create',
    'page arguments' => array(),
    'access arguments' => array('administer growcalc element nutritions'),
  );

  $items['growcalc/ajax/element_nutrition/%node/update'] = array(
    'page callback' => 'growcalc_element_nutrition_ajax_update',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc element nutritions'),
  );

  $items['growcalc/ajax/element_nutrition/%node/delete'] = array(
    'page callback' => 'growcalc_element_nutrition_ajax_delete',
    'page arguments' => array(3),
    'access arguments' => array('administer growcalc element nutritions'),
  );

  $items['admin/config/growcalc/element_nutrition'] = array(
    'title' => 'Element nutrition',
    'description' => 'Configure element nutrition.',
    'access arguments' => array('administer growcalc element nutrition module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growcalc_element_nutrition_settings'),
    'file' => 'growcalc_element_nutrition.admin.inc'
  );

  return $items;
}

function growcalc_element_nutrition_update($entity, $values) {
  $entity->title = $values['name'];

  // Добавление отсутствующих элементов, обновление существующих
  foreach($values['elements'] as $Element) {
    $contains = false;
    if (isset($entity->growcalc_elements)) {
      foreach(field_get_items('node', $entity, 'growcalc_elements') as $element_id) {
        $element_wrapper = entity_metadata_wrapper('field_collection_item', $element_id['value']);
        if ($element_wrapper->growcalc_element->title->value() == $Element['element']) {
          $contains = true;
          $element_wrapper->amount->set($Element['amount']);
          $element_wrapper->save();
          break;
        }
      }
    }
    if (!$contains) {
      
      $ref = node_load_multiple(array(), array('title' => $Element['element'], 'type' => 'growcalc_element'));
      $ref = reset($ref);
      $newElement = entity_create('field_collection_item', array(
          'field_name'           => 'growcalc_elements',
          'amount'            => array(LANGUAGE_NONE => array(0 => array('value' => $Element['amount']))),
          'growcalc_element' => array(LANGUAGE_NONE => array(0 => array('target_id' => $ref->nid, 'target_type' => 'node'))),
      ));
      $newElement->setHostEntity('node', $entity);
      $newElement->save();
    }
  }

  // Удаление элементов
  if (isset($entity->growcalc_elements)) {
    foreach(field_get_items('node', $entity, 'growcalc_elements') as $element_id) {
      $contains = false;
      $element = entity_metadata_wrapper('field_collection_item', $element_id['value']);
      if ($values['elements'] != null) {
        foreach($values['elements'] as $Element) {
          if ($element->growcalc_element->title->value() == $Element['element']) {
            $contains = true;
          }
        }
      }
      if (!$contains) {
        foreach(field_get_items('node', $entity, 'growcalc_elements') as $k=>$element_id) {
          if ($element_id['value'] == $element->item_id->value()) {
            unset($entity->growcalc_elements['und'][$k]);
            break;
          }
        }
      }
    }
  }

  node_submit($entity);
  node_save($entity);
  
  return $entity;  
}

function growcalc_element_nutrition_ajax_create($type) {
  $entity = growcalc_element_nutrition_update(growcalc_entity_new('growcalc_element_nutrition'), array(
    'name' => check_plain($_POST['name']),
    //'status' => check_plain($_POST['status']),
    'elements' => $_POST['elements'],
  ));

  if ($entity->nid) {
    print drupal_json_output(array('success' => true, 'id' => $entity->nid));
  } else {
    // throw new ajax error.
  }
}

function growcalc_element_nutrition_ajax_update($entity) {
  $entity = growcalc_element_nutrition_update($entity, array(
    'name' => check_plain($_POST['name']),
    //'status' => check_plain($_POST['status']),
    'elements' => $_POST['elements'],
  ));

  print drupal_json_output(array('success' => true));
}

function growcalc_element_nutrition_ajax_delete($entity) {
  node_delete($entity->nid);

  print drupal_json_output(array('success' => true));
}

/**
 * Implements hook_permission().
 */
function growcalc_element_nutrition_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer growcalc element nutritions' => array(
      'title' => t('Administer growcalc_element_nutritions'),
      'description' => t('Edit and delete all growcalc_element_nutritions'),
    ),  
    'administer growcalc element nutrition module' => array(
      'title' => t('Administer growcalc_element_nutrition module'),
      'description' => t('Change module settings.'),
    ),  
  );

  return $permissions;  
}

/**
 * Implements hook_views_api().
 */
function growcalc_element_nutrition_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'growcalc_element_nutrition') . '/views',
  );
}

/* =========== Block ============ */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function growcalc_element_nutrition_block_info() {
  $blocks['growcalc_element_nutritions'] = array(
    'info' => t('Element nutritions'),
    'cache' => DRUPAL_CACHE_CUSTOM,
    'status' => TRUE,
    'region' => 'sidebar_first',
//    'visibility' => BLOCK_VISIBILITY_LISTED,  // Not usually provided.
    'pages' => 'growcalc/fertilizer_nutrition/*',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 */
function growcalc_element_nutrition_block_configure($delta = '') {
  $form = array();
  if ($delta == 'growcalc_element_nutritions') {
    // TODO: form
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 */
function growcalc_element_nutrition_block_save($delta = '', $edit = array()) {
  if ($delta == 'growcalc_element_nutritions') {
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function growcalc_element_nutrition_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'growcalc_element_nutritions':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Element nutritions');
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = growcalc_element_nutrition_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function growcalc_element_nutrition_block_contents($which_block) {
  switch ($which_block) {
    case 'growcalc_element_nutritions':
      $filter = '<input class="calc-element-nutritions-filter filter" id="calc-element-nutritions-filter" type="text" placeholder="' . t('Element nutritions...') . '">';
      
      return array('#markup' => 
        '<div class="calc-element-nutritions-controls">'.$filter.'</div>' .
          '<div id="calc-element-nutritions"></div>');
  }
}
